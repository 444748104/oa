<!--
 * @Author: baozhoutao@steedos.com
 * @Date: 2022-06-02 17:45:15
 * @LastEditors: baozhoutao@steedos.com
 * @LastEditTime: 2022-09-22 15:10:22
 * @Description: 
-->
<html>
  <head>
    <script src="/unpkg.com/@steedos-builder/fiddle@0.0.5/dist/builder-fiddle.umd.js"></script>
    <script src="/unpkg.com/axios@0.26.1/dist/axios.min.js"></script>
  </head>

  <body>
    <builder-fiddle host="<%=builderHost%>"></builder-fiddle>
    <script>
      const settings = {
        assetUrls: "<%=assetUrls%>",
        rootUrl: "<%=rootUrl%>",
        userId: "<%=userId%>",
        tenantId: "<%=tenantId%>",
        authToken: "<%=authToken%>",
        id: "<%=id%>",
        pageId: "<%=id%>",
        formId: "<%=formId%>",
        messageOnly: true,
        hiddenDeploy: true
      };

      let comp = document.querySelector("builder-fiddle");

      const loadPage = async () => {
        //settings结果集同样加入formId
        const { assetUrls, rootUrl, userId, tenantId, authToken, id, formId } = settings;

        // 如果传入 steedos rooturl
        if (rootUrl && !authToken) return;

        const initialContent = {
          type: "page",
          bodyClassName: 'p-0',
          regions: [
            "body"
          ]
        };

        if (id) {
          const result = await axios.post(
            `${rootUrl}/graphql`,
            {
              //forms作为对象
              query: `
                  {
                    record:forms__findOne(id: "${formId}"){
                      _id,
                      amis_schema
                    }
                  }
                `
            },
            {
              withCredentials: true,
              headers: { Authorization: `Bearer ${tenantId},${authToken}` },
            }
          );
          if (result?.data?.data?.record) {
            let schema = result.data.data.record.amis_schema;
            if(!schema){
              schema = Object.assign({}, initialContent, {body: [
                {
                  type: "form",
                  name: "instanceForm",
                  body: [],
                  "actions": [],
                  "wrapWithPanel": false
                }
              ]});
            }

            let objectName = result.data.object;
            let pageType = result.data.type;
            if (typeof schema === "string") {
              schema = JSON.parse(schema);
            }

            if (!schema.data) {
              schema.data = {};
            }

            if (!schema.data.context) {
              schema.data.context = {};
            }

            schema.data.app_id = '';
            schema.data.tab_id = '';
            schema.data.object_name = '';
            schema.data.dataComponentId = '';
            schema.data.record_id = '';
            schema.data.record = {};
            schema.data.permissions = {};

            schema.data.context.rootUrl = rootUrl;
            schema.data.context.tenantId = tenantId;
            schema.data.context.userId = userId;
            schema.data.context.authToken = authToken;

            return schema || initialContent
          }
        } else {
          return initialContent
        }
      };

      /**
       * TODO :
       * 1 将schema（data） 存储到 form的 amis_schema中 
       * 2 使用trigger: form的 amis_schema 发生变化的时候， 
       * 需要重新从schema中计算出form的字段，并更新到db中。
       */

      const savePage = async (data) => {
        const { rootUrl, userId, tenantId, authToken, id, formId } = settings;
        console.log(id);
        if (!id) {
          return;
        }

        // 保存schema时,清理context下的认证信息
        const schema = JSON.parse(
          JSON.stringify(data.data.AmisSchema, null, 4)
        );
        if (schema.data && typeof schema.data.context === 'object' ) {
          delete schema.data.context.userId;
          delete schema.data.context.tenantId;
          delete schema.data.context.authToken;
          delete schema.data.context.user;
        }
        return await axios.post(
          `${rootUrl}/graphql`,
            {
              query: `
                mutation{
                  forms__update(id: "${formId}", doc: {amis_schema: ${JSON.stringify(JSON.stringify(schema, null, 4))}}){_id}
                }
              `,
            },
            {
              withCredentials: true,
              headers: { Authorization: `Bearer ${tenantId},${authToken}` },
            }
          )
          .catch(function (error) {
            // handle error
            console.log(error);
          });
      };

      const deployPageVersion = async () => {
        
      };
      window.addEventListener('message', function (event) {
        const { data } = event;
        if (data) {
          if (data.type === 'builder.loadContent') {
            loadPage().then((content)=>{
              comp.messageFrame('builder.contentChanged', { AmisSchema : content } )
            })
          }
          if (data.type === 'builder.saveContent') {
            savePage(data.data).then(()=>{
              comp.messageFrame('builder.contentSaved')
            })
          }
          if(data.type === "builder.deployContent"){
            deployPageVersion().then(()=>{
              comp.messageFrame('builder.contentDeployed')
            })
          }
        }
      })
    
      comp.settings = settings;
    </script>
  </body>
</html>
