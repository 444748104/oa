{"version":3,"sources":["meteor://💻app/packages/steedos:qcloud-smsqueue/checkNpm.js","meteor://💻app/packages/steedos:qcloud-smsqueue/lib/common/main.js","meteor://💻app/packages/steedos:qcloud-smsqueue/lib/common/sms.js","meteor://💻app/packages/steedos:qcloud-smsqueue/lib/server/api.js","meteor://💻app/packages/steedos_qcloud-smsqueue/server/startup.coffee","meteor://💻app/server/startup.coffee"],"names":["checkNpmVersions","module","link","v","QcloudSMSQueue","EventState","collection","SMSQueue","_validateDocument","sms","check","Object","sent","Match","Optional","Boolean","sending","Integer","createdAt","Date","createdBy","OneOf","String","send","options","currentUser","Meteor","isClient","userId","isServer","_","extend","test","pick","insert","isConfigured","sendWorker","task","interval","debug","console","log","setInterval","error","message","sdkappid","appkey","request","require","sha256","getRand","bit","Math","round","random","sendTextMsg","phone","msg","url","rand","time","sig","content","replace","post","end","err","res","Configure","self","sendTimeout","Error","signname","sendSMS","RecNum","_querySend","_id","serverSend","isSending","sendInterval","_ensureIndex","now","timeoutAt","reserved","update","$lt","$set","result","keepSMS","remove","sentAt","emit","batchSize","sendBatchSize","pendingSMS","find","$and","sort","limit","forEach","startup","ref","ref1","settings","qcloud","smsqueue_interval"],"mappings":"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","file":"/packages/steedos_qcloud-smsqueue.js","sourcesContent":["import { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\r\ncheckNpmVersions({\r\n\t\"superagent\": \"^3.5.2\",\r\n\t\"sha256\": \"^0.2.0\"\r\n}, 'steedos:qcloud-smsqueue');","QcloudSMSQueue = new EventState();","QcloudSMSQueue.collection = SMSQueue.collection;\r\n\r\nvar _validateDocument = function(sms) {\r\n\r\n\tcheck(sms, {\r\n\t\tsms: Object,\r\n\t\tsent: Match.Optional(Boolean),\r\n\t\tsending: Match.Optional(Match.Integer),\r\n\t\tcreatedAt: Date,\r\n\t\tcreatedBy: Match.OneOf(String, null)\r\n\t});\r\n\r\n};\r\n\r\nQcloudSMSQueue.send = function(options) {\r\n\tvar currentUser = Meteor.isClient && Meteor.userId && Meteor.userId() || Meteor.isServer && (options.createdBy || '<SERVER>') || null\r\n\tvar sms = _.extend({\r\n\t\tcreatedAt: new Date(),\r\n\t\tcreatedBy: currentUser\r\n\t});\r\n\r\n\tif (Match.test(options, Object)) {\r\n\t\tsms.sms = _.pick(options, 'Format', 'Action', 'ParamString', 'RecNum', 'SignName', 'TemplateCode', 'msg');\r\n\t}\r\n\r\n\tsms.sent = false;\r\n\tsms.sending = 0;\r\n\r\n\t_validateDocument(sms);\r\n\r\n\treturn QcloudSMSQueue.collection.insert(sms);\r\n};","var isConfigured = false;\r\nvar sendWorker = function(task, interval) {\r\n\r\n\tif (QcloudSMSQueue.debug) {\r\n\t\tconsole.log('QcloudSMSQueue: Send worker started, using interval: ' + interval);\r\n\t}\r\n\r\n\treturn Meteor.setInterval(function() {\r\n\t\ttry {\r\n\t\t\ttask();\r\n\t\t} catch (error) {\r\n\t\t\tif (QcloudSMSQueue.debug) {\r\n\t\t\t\tconsole.log('QcloudSMSQueue: Error while sending: ' + error.message);\r\n\t\t\t}\r\n\t\t}\r\n\t}, interval);\r\n};\r\n\r\n// var SMS = require('aliyun-sms-node'),\r\n// \tsmsSender;\r\n\r\nvar sdkappid, appkey;\r\n\r\nvar request = require('superagent'),\r\n\tsha256 = require('sha256');\r\n\r\nfunction getRand(bit) {\r\n\r\n\tbit = bit || 10000000;\r\n\r\n\treturn Math.round(Math.random() * bit);\r\n};\r\n\r\n//send text message\r\nfunction sendTextMsg(sdkappid, appkey, phone, msg) {\r\n\r\n\tif (!phone || /1\\d{12}/.test(phone)) {\r\n\t\treturn console.log('invalid phone number');\r\n\t}\r\n\r\n\tvar url = 'https://yun.tim.qq.com/v5/tlssmssvr/sendsms?sdkappid={sdkappid}&random={random}';\r\n\r\n\tvar rand = getRand(),\r\n\t\ttime = Math.round(+new Date() / 1000),\r\n\t\tsig = sha256('appkey=' + appkey + '&random=' + rand + '&time=' + time + '&mobile=' + phone);\r\n\r\n\tvar content = {\r\n\t\t\"tel\": { //如需使用国际电话号码通用格式，如：\"+8613788888888\" ，请使用sendisms接口见下注\r\n\t\t\t\"nationcode\": \"86\", //国家码\r\n\t\t\t\"mobile\": phone //手机号码\r\n\t\t},\r\n\t\t\"type\": 0, //0:普通短信;1:营销短信（强调：要按需填值，不然会影响到业务的正常使用）\r\n\t\t\"msg\": msg, //utf8编码 \r\n\t\t\"sig\": sig, //app凭证，具体计算方式见下注\r\n\t\t\"time\": time, //unix时间戳，请求发起时间，如果和系统时间相差超过10分钟则会返回失败\r\n\t\t\"extend\": \"\", //通道扩展码，可选字段，默认没有开通(需要填空)。\r\n\t\t//在短信回复场景中，腾讯server会原样返回，开发者可依此区分是哪种类型的回复\r\n\t\t\"ext\": \"\" //用户的session内容，腾讯server回包中会原样返回，可选字段，不需要就填空。\r\n\t};\r\n\turl = url.replace('{sdkappid}', sdkappid)\r\n\t\t.replace('{random}', rand);\r\n\trequest\r\n\t\t.post(url)\r\n\t\t.send(content)\r\n\t\t.end(function(err, res) {\r\n\t\t\tif (err) {\r\n\t\t\t\treturn console.error(err);\r\n\t\t\t}\r\n\t\t});\r\n};\r\n\r\n/*\r\n\toptions: {\r\n\t\t// Controls the sending interval\r\n\t\tsendInterval: Match.Optional(Number),\r\n\t\t// Controls the sending batch size per interval\r\n\t\tsendBatchSize: Match.Optional(Number),\r\n\t\t// Allow optional keeping notifications in collection\r\n\t\tkeepSMS: Match.Optional(Boolean)\r\n\t}\r\n*/\r\nQcloudSMSQueue.Configure = function(options) {\r\n\tvar self = this;\r\n\toptions = _.extend({\r\n\t\tsendTimeout: 60000, // Timeout period for sms send\r\n\t}, options);\r\n\r\n\t// Block multiple calls\r\n\tif (isConfigured) {\r\n\t\tthrow new Error('QcloudSMSQueue.Configure should not be called more than once!');\r\n\t}\r\n\r\n\tisConfigured = true;\r\n\r\n\t// Add debug info\r\n\tif (QcloudSMSQueue.debug) {\r\n\t\tconsole.log('QcloudSMSQueue.Configure', options);\r\n\t}\r\n\r\n\t// smsSender = new SMS({\r\n\t// \tAccessKeyId: options.accessKeyId,\r\n\t// \tAccessKeySecret: options.accessKeySecret\r\n\t// });\r\n\r\n\tsdkappid = options.sdkappid;\r\n\tappkey = options.appkey;\r\n\tsignname = options.signname || \"\";\r\n\r\n\tself.sendSMS = function(sms) {\r\n\t\tif (QcloudSMSQueue.debug) {\r\n\t\t\tconsole.log(\"sendSMS\");\r\n\t\t\tconsole.log(sms);\r\n\t\t}\r\n\r\n\t\t// smsSender.send(sms.sms).catch(err => {\r\n\t\t// \tconsole.error(err)\r\n\t\t// });\r\n\r\n\t\tsendTextMsg(sdkappid, appkey, sms.sms.RecNum, (sms.signname || signname) + sms.sms.msg);\r\n\t}\r\n\r\n\t// Universal send function\r\n\tvar _querySend = function(options) {\r\n\r\n\t\tif (self.sendSMS) {\r\n\t\t\tself.sendSMS(options);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tsms: [options._id]\r\n\t\t};\r\n\t};\r\n\r\n\tself.serverSend = function(options) {\r\n\t\toptions = options || {};\r\n\t\treturn _querySend(options);\r\n\t};\r\n\r\n\r\n\t// This interval will allow only one sms to be sent at a time, it\r\n\t// will check for new sms at every `options.sendInterval`\r\n\t// (default interval is 15000 ms)\r\n\t//\r\n\t// It looks in sms collection to see if theres any pending\r\n\t// sms, if so it will try to reserve the pending sms.\r\n\t// If successfully reserved the send is started.\r\n\t//\r\n\t// If sms.query is type string, it's assumed to be a json string\r\n\t// version of the query selector. Making it able to carry `$` properties in\r\n\t// the mongo collection.\r\n\t//\r\n\t// Pr. default sms are removed from the collection after send have\r\n\t// completed. Setting `options.keepSMS` will update and keep the\r\n\t// sms eg. if needed for historical reasons.\r\n\t//\r\n\t// After the send have completed a \"send\" event will be emitted with a\r\n\t// status object containing sms id and the send result object.\r\n\t//\r\n\tvar isSending = false;\r\n\r\n\tif (options.sendInterval !== null) {\r\n\r\n\t\t// This will require index since we sort sms by createdAt\r\n\t\tQcloudSMSQueue.collection._ensureIndex({\r\n\t\t\tcreatedAt: 1\r\n\t\t});\r\n\t\tQcloudSMSQueue.collection._ensureIndex({\r\n\t\t\tsent: 1\r\n\t\t});\r\n\t\tQcloudSMSQueue.collection._ensureIndex({\r\n\t\t\tsending: 1\r\n\t\t});\r\n\r\n\r\n\t\tvar sendSMS = function(sms) {\r\n\t\t\t// Reserve sms\r\n\t\t\tvar now = +new Date();\r\n\t\t\tvar timeoutAt = now + options.sendTimeout;\r\n\t\t\tvar reserved = QcloudSMSQueue.collection.update({\r\n\t\t\t\t_id: sms._id,\r\n\t\t\t\tsent: false, // xxx: need to make sure this is set on create\r\n\t\t\t\tsending: {\r\n\t\t\t\t\t$lt: now\r\n\t\t\t\t}\r\n\t\t\t}, {\r\n\t\t\t\t$set: {\r\n\t\t\t\t\tsending: timeoutAt,\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// Make sure we only handle sms reserved by this\r\n\t\t\t// instance\r\n\t\t\tif (reserved) {\r\n\r\n\t\t\t\t// Send the sms\r\n\t\t\t\tvar result = QcloudSMSQueue.serverSend(sms);\r\n\r\n\t\t\t\tif (!options.keepSMS) {\r\n\t\t\t\t\t// Pr. Default we will remove sms\r\n\t\t\t\t\tQcloudSMSQueue.collection.remove({\r\n\t\t\t\t\t\t_id: sms._id\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// Update the sms\r\n\t\t\t\t\tQcloudSMSQueue.collection.update({\r\n\t\t\t\t\t\t_id: sms._id\r\n\t\t\t\t\t}, {\r\n\t\t\t\t\t\t$set: {\r\n\t\t\t\t\t\t\t// Mark as sent\r\n\t\t\t\t\t\t\tsent: true,\r\n\t\t\t\t\t\t\t// Set the sent date\r\n\t\t\t\t\t\t\tsentAt: new Date(),\r\n\t\t\t\t\t\t\t// Not being sent anymore\r\n\t\t\t\t\t\t\tsending: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Emit the send\r\n\t\t\t\tself.emit('send', {\r\n\t\t\t\t\tsms: sms._id,\r\n\t\t\t\t\tresult: result\r\n\t\t\t\t});\r\n\r\n\t\t\t} // Else could not reserve\r\n\t\t}; // EO sendSMS\r\n\r\n\t\tsendWorker(function() {\r\n\r\n\t\t\tif (isSending) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// Set send fence\r\n\t\t\tisSending = true;\r\n\r\n\t\t\tvar batchSize = options.sendBatchSize || 1;\r\n\r\n\t\t\tvar now = +new Date();\r\n\r\n\t\t\t// Find sms that are not being or already sent\r\n\t\t\tvar pendingSMS = QcloudSMSQueue.collection.find({\r\n\t\t\t\t$and: [\r\n\t\t\t\t\t// Message is not sent\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsent: false\r\n\t\t\t\t\t},\r\n\t\t\t\t\t// And not being sent by other instances\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsending: {\r\n\t\t\t\t\t\t\t$lt: now\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}, {\r\n\t\t\t\t// Sort by created date\r\n\t\t\t\tsort: {\r\n\t\t\t\t\tcreatedAt: 1\r\n\t\t\t\t},\r\n\t\t\t\tlimit: batchSize\r\n\t\t\t});\r\n\r\n\t\t\tpendingSMS.forEach(function(sms) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsendSMS(sms);\r\n\t\t\t\t} catch (error) {\r\n\r\n\t\t\t\t\tif (QcloudSMSQueue.debug) {\r\n\t\t\t\t\t\tconsole.log('QcloudSMSQueue: Could not send sms id: \"' + sms._id + '\", Error: ' + error.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}); // EO forEach\r\n\r\n\t\t\t// Remove the send fence\r\n\t\t\tisSending = false;\r\n\t\t}, options.sendInterval || 15000); // Default every 15th sec\r\n\r\n\t} else {\r\n\t\tif (QcloudSMSQueue.debug) {\r\n\t\t\tconsole.log('QcloudSMSQueue: Send server is disabled');\r\n\t\t}\r\n\t}\r\n\r\n};","Meteor.startup ->\r\n\tif Meteor.settings.sms?.qcloud?.smsqueue_interval\r\n\t\tQcloudSMSQueue.Configure\r\n\t\t\tsendInterval: Meteor.settings.sms.qcloud.smsqueue_interval\r\n\t\t\tsendBatchSize: 10\r\n\t\t\tkeepSMS: true\r\n\t\t\tsdkappid: Meteor.settings.sms.qcloud.sdkappid\r\n\t\t\tappkey: Meteor.settings.sms.qcloud.appkey\r\n\t\t\tsignname: Meteor.settings.sms.qcloud.signname\r\n","Meteor.startup(function() {\n  var ref, ref1;\n  if ((ref = Meteor.settings.sms) != null ? (ref1 = ref.qcloud) != null ? ref1.smsqueue_interval : void 0 : void 0) {\n    return QcloudSMSQueue.Configure({\n      sendInterval: Meteor.settings.sms.qcloud.smsqueue_interval,\n      sendBatchSize: 10,\n      keepSMS: true,\n      sdkappid: Meteor.settings.sms.qcloud.sdkappid,\n      appkey: Meteor.settings.sms.qcloud.appkey,\n      signname: Meteor.settings.sms.qcloud.signname\n    });\n  }\n});\n"]}