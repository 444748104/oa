{"version":3,"sources":["meteor://ğŸ’»app/packages/autoupdate/autoupdate_server.js"],"names":["_objectSpread","module","link","default","v","export","Autoupdate","onMessage","Future","Npm","require","__meteor_runtime_config__","autoupdate","versions","ClientVersions","Mongo","Collection","connection","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_SynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","findOne","_id","insert","update","$set","publish","check","Match","OneOf","String","undefined","find","is_auto","startup","upsert","fut","queueTask","wait","return","enqueueVersionsRefresh","on","bindEnvironment"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Publish the current client versions for each client architecture\r\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\r\n// a change in the versions associated with its client architecture,\r\n// it will refresh itself, either by swapping out CSS assets or by\r\n// reloading the page.\r\n//\r\n// There are three versions for any given client architecture: `version`,\r\n// `versionRefreshable`, and `versionNonRefreshable`. The refreshable\r\n// version is a hash of just the client resources that are refreshable,\r\n// such as CSS, while the non-refreshable version is a hash of the rest of\r\n// the client assets, excluding the refreshable ones: HTML, JS, and static\r\n// files in the `public` directory. The `version` version is a combined\r\n// hash of everything.\r\n//\r\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\r\n// used in place of all client versions. You can use this variable to\r\n// control when the client reloads. For example, if you want to force a\r\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\r\n// change it only when something worth pushing to clients happens.\r\n//\r\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\r\n// The ID of each document is the client architecture, and the fields of\r\n// the document are the versions described above.\r\n\r\nvar Future = Npm.require(\"fibers/future\");\r\n\r\nexport const Autoupdate = __meteor_runtime_config__.autoupdate = {\r\n  // Map from client architectures (web.browser, web.browser.legacy,\r\n  // web.cordova) to version fields { version, versionRefreshable,\r\n  // versionNonRefreshable, refreshable } that will be stored in\r\n  // ClientVersions documents (whose IDs are client architectures). This\r\n  // data gets serialized into the boilerplate because it's stored in\r\n  // __meteor_runtime_config__.autoupdate.versions.\r\n  versions: {}\r\n};\r\n\r\n// The collection of acceptable client versions.\r\nconst ClientVersions =\r\n  new Mongo.Collection(\"meteor_autoupdate_clientVersions\", {\r\n    connection: null\r\n  });\r\n\r\n// The client hash includes __meteor_runtime_config__, so wait until\r\n// all packages have loaded and have had a chance to populate the\r\n// runtime config before using the client hash as our default auto\r\n// update version id.\r\n\r\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\r\n// startup.\r\nAutoupdate.autoupdateVersion = null;\r\nAutoupdate.autoupdateVersionRefreshable = null;\r\nAutoupdate.autoupdateVersionCordova = null;\r\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\r\n\r\nvar syncQueue = new Meteor._SynchronousQueue();\r\n\r\nfunction updateVersions(shouldReloadClientProgram) {\r\n  // Step 1: load the current client program on the server\r\n  if (shouldReloadClientProgram) {\r\n    WebAppInternals.reloadClientPrograms();\r\n  }\r\n\r\n  const {\r\n    // If the AUTOUPDATE_VERSION environment variable is defined, it takes\r\n    // precedence, but Autoupdate.autoupdateVersion is still supported as\r\n    // a fallback. In most cases neither of these values will be defined.\r\n    AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\r\n  } = process.env;\r\n\r\n  // Step 2: update __meteor_runtime_config__.autoupdate.versions.\r\n  const clientArchs = Object.keys(WebApp.clientPrograms);\r\n  clientArchs.forEach(arch => {\r\n    Autoupdate.versions[arch] = {\r\n      version: AUTOUPDATE_VERSION ||\r\n        WebApp.calculateClientHash(arch),\r\n      versionRefreshable: AUTOUPDATE_VERSION ||\r\n        WebApp.calculateClientHashRefreshable(arch),\r\n      versionNonRefreshable: AUTOUPDATE_VERSION ||\r\n        WebApp.calculateClientHashNonRefreshable(arch),\r\n    };\r\n  });\r\n\r\n  // Step 3: form the new client boilerplate which contains the updated\r\n  // assets and __meteor_runtime_config__.\r\n  if (shouldReloadClientProgram) {\r\n    WebAppInternals.generateBoilerplate();\r\n  }\r\n\r\n  // Step 4: update the ClientVersions collection.\r\n  // We use `onListening` here because we need to use\r\n  // `WebApp.getRefreshableAssets`, which is only set after\r\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\r\n  WebApp.onListening(() => {\r\n    clientArchs.forEach(arch => {\r\n      const payload = {\r\n        ...Autoupdate.versions[arch],\r\n        assets: WebApp.getRefreshableAssets(arch),\r\n      };\r\n      if (! ClientVersions.findOne({ _id: arch })) {\r\n        ClientVersions.insert({ _id: arch, ...payload });\r\n      } else {\r\n        ClientVersions.update(arch, { $set: payload });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nMeteor.publish(\r\n  \"meteor_autoupdate_clientVersions\",\r\n  function (appId) {\r\n    // `null` happens when a client doesn't have an appId and passes\r\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\r\n    // `null` as JSON doesn't have `undefined.\r\n    check(appId, Match.OneOf(String, undefined, null));\r\n\r\n    // // Don't notify clients using wrong appId such as mobile apps built with a\r\n    // // different server but pointing at the same local url\r\n    // if (Autoupdate.appId && appId && Autoupdate.appId !== appId)\r\n    //   return [];\r\n\r\n    return ClientVersions.find();\r\n  },\r\n  {is_auto: true}\r\n);\r\n\r\nMeteor.startup(function () {\r\n  updateVersions(false);\r\n\r\n  // Force any connected clients that are still looking for these older\r\n  // document IDs to reload.\r\n  [\"version\",\r\n   \"version-refreshable\",\r\n   \"version-cordova\",\r\n  ].forEach(_id => {\r\n    ClientVersions.upsert(_id, {\r\n      $set: { version: \"outdated\" }\r\n    });\r\n  });\r\n});\r\n\r\nvar fut = new Future();\r\n\r\n// We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\r\n// so we add a queued task that waits for onListen before 'refresh' can queue\r\n// tasks. Note that the `onListening` callbacks do not fire until after\r\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\r\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\r\n\r\nsyncQueue.queueTask(function () {\r\n  fut.wait();\r\n});\r\n\r\nWebApp.onListening(function () {\r\n  fut.return();\r\n});\r\n\r\nfunction enqueueVersionsRefresh() {\r\n  syncQueue.queueTask(function () {\r\n    updateVersions(true);\r\n  });\r\n}\r\n\r\n// Listen for messages pertaining to the client-refresh topic.\r\nimport { onMessage } from \"meteor/inter-process-messaging\";\r\nonMessage(\"client-refresh\", enqueueVersionsRefresh);\r\n\r\n// Another way to tell the process to refresh: send SIGHUP signal\r\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\r\n  enqueueVersionsRefresh();\r\n}, \"handling SIGHUP signal for refresh\"));\r\n"]}